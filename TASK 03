def print_grid(grid):
    for row in grid:
        line = ""
        for num in row:
            if num == 0:
                line += ". "
            else:
                line += str(num) + " "
        print(line.strip())


def find_empty_cell(grid):
    for row in range(9):
        for col in range(9):
            if grid[row][col] == 0:
                return row, col
    return None


def is_valid(grid, number, position):
    row, col = position

    # Check the row
    for i in range(9):
        if grid[row][i] == number and i != col:
            return False

    # Check the column
    for i in range(9):
        if grid[i][col] == number and i != row:
            return False

    # Check the 3x3 square
    start_row = row - row % 3
    start_col = col - col % 3
    for i in range(3):
        for j in range(3):
            if grid[start_row + i][start_col + j] == number and (start_row + i, start_col + j) != position:
                return False

    return True


def solve_sudoku(grid):
    empty = find_empty_cell(grid)
    if not empty:
        return True  # Puzzle solved

    row, col = empty

    for number in range(1, 10):
        if is_valid(grid, number, (row, col)):
            grid[row][col] = number

            if solve_sudoku(grid):
                return True

            grid[row][col] = 0  # Backtrack

    return False


# Sample Sudoku puzzle (0 means empty cell)
puzzle = [
    [5, 3, 0, 0, 7, 0, 0, 0, 0],
    [6, 0, 0, 1, 9, 5, 0, 0, 0],
    [0, 9, 8, 0, 0, 0, 0, 6, 0],
    [8, 0, 0, 0, 6, 0, 0, 0, 3],
    [4, 0, 0, 8, 0, 3, 0, 0, 1],
    [7, 0, 0, 0, 2, 0, 0, 0, 6],
    [0, 6, 0, 0, 0, 0, 2, 8, 0],
    [0, 0, 0, 4, 1, 9, 0, 0, 5],
    [0, 0, 0, 0, 8, 0, 0, 7, 9]
]

print("This is the original Sudoku puzzle:\n")
print_grid(puzzle)

if solve_sudoku(puzzle):
    print("\nThe puzzle has been solved:\n")
    print_grid(puzzle)
else:
    print("\nThis puzzle cannot be solved.")
